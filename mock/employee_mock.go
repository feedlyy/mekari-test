// Code generated by MockGen. DO NOT EDIT.
// Source: domain/employee.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "mekari-test/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmployeeRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockEmployeeRepository) Get(ctx context.Context) ([]domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeeRepositoryMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeeRepository)(nil).Get), ctx)
}

// GetById mocks base method.
func (m *MockEmployeeRepository) GetById(ctx context.Context, id int) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockEmployeeRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEmployeeRepository)(nil).GetById), ctx, id)
}

// Store mocks base method.
func (m *MockEmployeeRepository) Store(ctx context.Context, employee domain.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockEmployeeRepositoryMockRecorder) Store(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEmployeeRepository)(nil).Store), ctx, employee)
}

// Update mocks base method.
func (m *MockEmployeeRepository) Update(ctx context.Context, employee domain.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeRepositoryMockRecorder) Update(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeRepository)(nil).Update), ctx, employee)
}

// MockEmployeeService is a mock of EmployeeService interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmployeeService) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeService)(nil).Delete), ctx, id)
}

// GetAllEmployee mocks base method.
func (m *MockEmployeeService) GetAllEmployee(ctx context.Context) ([]domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployee", ctx)
	ret0, _ := ret[0].([]domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployee indicates an expected call of GetAllEmployee.
func (mr *MockEmployeeServiceMockRecorder) GetAllEmployee(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployee", reflect.TypeOf((*MockEmployeeService)(nil).GetAllEmployee), ctx)
}

// GetById mocks base method.
func (m *MockEmployeeService) GetById(ctx context.Context, id int) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockEmployeeServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEmployeeService)(nil).GetById), ctx, id)
}

// Register mocks base method.
func (m *MockEmployeeService) Register(ctx context.Context, employee domain.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockEmployeeServiceMockRecorder) Register(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEmployeeService)(nil).Register), ctx, employee)
}

// Update mocks base method.
func (m *MockEmployeeService) Update(ctx context.Context, employee domain.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeServiceMockRecorder) Update(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeService)(nil).Update), ctx, employee)
}
